backend.tf

terraform {
  backend "s3" {
    bucket = "terraformstate1988"
    key    = "terraform/backend"
    region = "us-east-1"
  }
}

...............................................................................................

provider.tf:

provider "aws" {
    region =var.AWS_REGION
}

..................................................................................................

vars.tf

variable "AWS_REGION" {
    default= "us-east-1"
}
variable "PRIV_KEY_PATH"{
    default="vprofilekey"
}
variable "PUB_KEY_PATH"{
    default = "vprofile_key_pub"
}
variable "USERNAME"{
    default = "ubuntu"
}
variable "MYIP"{
    default ="183.83.39.2/32"
}
variable "rmquser"{
    default = "rabbit"
}
variable "rmqpass"{
    default = "grpefqghswjshswus"
}
variable "dbuser"{
    default = "admin"
}
variable "dbpass"{
    default = "admin123"
}
variable "dbname"{
    default = "accounts"
}
variable "instance_count"{
    default="1"
}
variable "VPC_NAME"{
    default = "vprofile_vpc"
}
variable "ZONE1"{
    default ="us-east-1a"
}
variable "ZONE2"{
    default ="us-east-1b"
}
variable "ZONE3"{
    default ="us-east-1c"
}
variable "VpcCIDR"{
    default ="172.21.0.0/16"
}
variable "PubSub1CIDR"{
    default = "172.21.1.0/24"
}
variable "PubSub2CIDR"{
    default = "172.21.2.0/24"
}
variable "PubSub3CIDR"{
    default = "172.21.3.0/24"
}
variable "PrivSub1CIDR"{
    default = "172.21.4.0/24"
}
variable "PrivSub2CIDR"{
    default = "172.21.5.0/24"
}
variable "PrivSub3CIDR"{
    default = "172.21.6.0/24"
}


..............................................................................................

keypairs.tf

copy from https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/key_pair

open new terminal give ssh-keygen an copy public key without space and paste in code

resource "aws_key_pair" "vprofilekey" {
  key_name   = "vprofilekey" 
  public_key = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIItGapRlLkdLL3HiTKG/xBwzEnE4LsIZpi8abnRz6OoV Kritika@DESKTOP-IOT4FVS"
}

........................................................................................................................................

vpc.tf

module "vpc" {
  source = "terraform-aws-modules/vpc/aws"

  name = var.VPC_NAME
  cidr = var.VpcCIDR

  azs             = [var.ZONE1, var.ZONE2, var.ZONE3]
  private_subnets = [var.PrivSub1CIDR, var.PrivSub2CIDR, var.PrivSub3CIDR]
  public_subnets  = [var.PubSub1CIDR, var.PubSub2CIDR, var.PubSub3CIDR]

  enable_nat_gateway = true
  single_nat_gateway = true
  enable_dns_hostnames = true
  enable_dns_support = true
  map_public_ip_on_launch=true

  tags = {
    Name = var.VPC_NAME
    Project = var.PROJECT
  }
}

...........................................................................................................................................

secgrp.tf

#################################
#  ELB Security Group
#################################
resource "aws_security_group" "vprofile_bean_elb_sg" {
  name        = "vprofile-bean-elb-sg"
  description = "Security group for bean-elb"
  vpc_id      = module.vpc.vpc_id

  tags = {
    Name      = "vprofile-bean-elb"
    ManagedBy = "Terraform"
    Project   = "Vprofile"
  }
}

resource "aws_vpc_security_group_ingress_rule" "elb_allow_http" {
  security_group_id = aws_security_group.vprofile_bean_elb_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  to_port           = 80
  ip_protocol       = "tcp"
}

resource "aws_vpc_security_group_egress_rule" "elb_allow_all_out" {
  security_group_id = aws_security_group.vprofile_bean_elb_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}

#################################
#  Bastion Host Security Group
#################################
resource "aws_security_group" "vprofile_bastion_sg" {
  name        = "vprofile-bastion-sg"
  description = "Security group for bastion EC2"
  vpc_id      = module.vpc.vpc_id

  tags = {
    Name      = "vprofile-bastion-sg"
    ManagedBy = "Terraform"
    Project   = "Vprofile"
  }
}

resource "aws_vpc_security_group_ingress_rule" "bastion_allow_ssh" {
  security_group_id = aws_security_group.vprofile_bastion_sg.id
  cidr_ipv4         = "0.0.0.0/0" # ðŸ”’ Consider replacing with your IP
  from_port         = 22
  to_port           = 22
  ip_protocol       = "tcp"
}

resource "aws_vpc_security_group_egress_rule" "bastion_allow_all_out" {
  security_group_id = aws_security_group.vprofile_bastion_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}

#################################
#  App / Beanstalk Security Group
#################################
resource "aws_security_group" "vprofile_app_sg" {
  name        = "vprofile-prod-bean-sg"
  description = "Security group for Beanstalk app instances"
  vpc_id      = module.vpc.vpc_id

  tags = {
    Name      = "vprofile-app"
    ManagedBy = "Terraform"
    Project   = "Vprofile"
  }
}

resource "aws_vpc_security_group_ingress_rule" "app_allow_http_from_elb" {
  security_group_id            = aws_security_group.vprofile_app_sg.id
  referenced_security_group_id = aws_security_group.vprofile_bean_elb_sg.id
  from_port                    = 80
  to_port                      = 80
  ip_protocol                  = "tcp"
}

resource "aws_vpc_security_group_ingress_rule" "app_allow_ssh" {
  security_group_id = aws_security_group.vprofile_app_sg.id
  cidr_ipv4         = "0.0.0.0/0" # ðŸ”’ Consider locking down SSH
  from_port         = 22
  to_port           = 22
  ip_protocol       = "tcp"
}

resource "aws_vpc_security_group_egress_rule" "app_allow_all_out" {
  security_group_id = aws_security_group.vprofile_app_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}

#################################
#  Backend Security Group
#################################
resource "aws_security_group" "vprofile_backend_sg" {
  name        = "vprofile-backend-sg"
  description = "Security group for RDS, MQ, Elasticache"
  vpc_id      = module.vpc.vpc_id

  tags = {
    Name      = "vprofile-backend"
    ManagedBy = "Terraform"
    Project   = "Vprofile"
  }
}

resource "aws_vpc_security_group_ingress_rule" "backend_allow_from_app" {
  security_group_id            = aws_security_group.vprofile_backend_sg.id
  referenced_security_group_id = aws_security_group.vprofile_app_sg.id
  from_port                    = 0
  to_port                      = 65535
  ip_protocol                  = "tcp"
}

resource "aws_vpc_security_group_ingress_rule" "backend_allow_from_bastion" {
  security_group_id            = aws_security_group.vprofile_backend_sg.id
  referenced_security_group_id = aws_security_group.vprofile_bastion_sg.id
  from_port                    = 3306
  to_port                      = 3306
  ip_protocol                  = "tcp"
}

resource "aws_vpc_security_group_ingress_rule" "backend_allow_self" {
  security_group_id            = aws_security_group.vprofile_backend_sg.id
  referenced_security_group_id = aws_security_group.vprofile_backend_sg.id
  from_port                    = 0
  to_port                      = 65535
  ip_protocol                  = "tcp"
}

resource "aws_vpc_security_group_egress_rule" "backend_allow_all_out" {
  security_group_id = aws_security_group.vprofile_backend_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}



........................................................................................

RDS,Elasticache, Amazon MQ


backend-services.tf

resource "aws_db_subnet_group" "vprofile-rds-subgrp" {
  name       = "vprofile-rds-subgrp"
  subnet_ids = [module.vpc.private_subnets[0], module.vpc.private_subnets[1], module.vpc.private_subnets[2]]
  tags = {
    Name = "My DB subnet group"
  }

}


resource "aws_elasticache_subnet_group" "vprofile-ecache-subgrp" {
  name       = "vprofile-ecache-subgrp"
  subnet_ids = [module.vpc.private_subnets[0], module.vpc.private_subnets[1], module.vpc.private_subnets[2]]
  tags = {
    Name = "subnet group for elasticache"
  }
}

resource "aws_db_instance" "vprofile-rds" {
  allocated_storage      = 20
  storage_type           = "gp3"
  engine                 = "mysql"
  engine_version         = "8.0.39"
  instance_class         = "db.t4g.micro"
  db_name                = var.dbname
  username               = var.dbuser
  password               = var.dbpass
  parameter_group_name   = "default.mysql8.0"
  skip_final_snapshot    = true
  multi_az               = false
  publicly_accessible    = false
  db_subnet_group_name   = aws_db_subnet_group.vprofile-rds-subgrp.name
  vpc_security_group_ids = [aws_security_group.vprofile_backend_sg.id]

}

resource "aws_elasticache_cluster" "vprofile-cache" {
  cluster_id           = "vprofile-cache"
  engine               = "memcached"
  node_type            = "cache.t3.micro"
  engine_version       = "1.6.22"
  num_cache_nodes      = 1
  parameter_group_name = "default.memcached1.6"
  port                 = 11211
  security_group_ids   = [aws_security_group.vprofile_backend_sg.id]
  subnet_group_name    = aws_elasticache_subnet_group.vprofile-ecache-subgrp.name
}

resource "aws_mq_broker" "vprofile-rmq" {
  broker_name                = "vprofile-rmq"
  engine_type                = "RabbitMQ"
  engine_version             = "3.13"
  host_instance_type         = "mq.t3.micro"
  auto_minor_version_upgrade = true
  security_groups            = [aws_security_group.vprofile_backend_sg.id]
  subnet_ids                 = [module.vpc.private_subnets[0]]

  user {
    username = var.rmquser
    password = var.rmqpass
  }
}



....................................................................................................................
 
bean-app.tf

resource "aws_elastic_beanstalk_application" "vprofile-prod" {
  name        = "vprofile-prod"
  description = "Beanstalk App for vprofile project by Terraform"

}

.........................................................................................................................

bean-env.tf

resource "aws_elastic_beanstalk_environment" "vprofile-bean-prod" {
  name                = "vprofile-bean-prod"
  application         = aws_elastic_beanstalk_application.vprofile-prod.name
  solution_stack_name = "64bit Amazon Linux 2023 v5.4.1 running Tomcat 10 Corretto 21"
  cname_prefix        = "vprofile-bean-prod-activa"

  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "IamInstanceProfile"
    value     = "aws-elasticbeanstalk-ec2-role"
  }
  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "RootVolumeType"
    value     = "gp3"
  }
  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "DisableIMDSv1"
    value     = true
  }
  setting {
    namespace = "aws:ec2:vpc"
    name      = "AssociatePublicIpAddress"
    value     = true
  }

  setting {
    namespace = "aws:ec2:vpc"
    name      = "Subnets"
    value     = join(",", [module.vpc.private_subnets[0], module.vpc.private_subnets[1], module.vpc.private_subnets[2]])
  }
  setting {
    namespace = "aws:ec2:vpc"
    name      = "ELBSubnets"
    value     = join(",", [module.vpc.public_subnets[0], module.vpc.public_subnets[1], module.vpc.public_subnets[2]])
  }

  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "InstanceType"
    value     = "t3.micro"
  }

  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "EC2KeyName"
    value     = aws_key_pair.vprofilekey.key_name
  }

  setting {
    namespace = "aws:autoscaling:asg"
    name      = "Availability Zones"
    value     = "Any 3"
  }
  setting {
    namespace = "aws:autoscaling:asg"
    name      = "MinSize"
    value     = "1"
  }
  setting {
    namespace = "aws:autoscaling:asg"
    name      = "MaxSize"
    value     = "8"
  }

  setting {
    namespace = "aws:elasticbeanstalk:application:environment"
    name      = "environment"
    value     = "prod"
  }
  setting {
    namespace = "aws:elasticbeanstalk:application:environment"
    name      = "LOGGING_APPENDER"
    value     = "GRAYLOG"
  }
  setting {
    namespace = "aws:elasticbeanstalk:healthreporting:system"
    name      = "SystemType"
    value     = "enhanced"
  }
  setting {
    namespace = "aws:autoscaling:updatepolicy:rollingupdate"
    name      = "RollingUpdateEnabled"
    value     = "true"
  }
  setting {
    namespace = "aws:autoscaling:updatepolicy:rollingupdate"
    name      = "RollingUpdateType"
    value     = "Health"
  }

  setting {
    namespace = "aws:autoscaling:updatepolicy:rollingupdate"
    name      = "MaxBatchSize"
    value     = "1"
  }
  setting {
    namespace = "aws:elb:loadbalancer"
    name      = "CrossZone"
    value     = "true"
  }

  setting {
    name      = "StickinessEnabled"
    namespace = "aws:elasticbeanstalk:environment:process:default"
    value     = "true"
  }

  setting {
    namespace = "aws:elasticbeanstalk:command"
    name      = "BatchSizeType"
    value     = "Fixed"
  }

  setting {
    namespace = "aws:elasticbeanstalk:command"
    name      = "BatchSize"
    value     = "1"
  }
  setting {
    namespace = "aws:elasticbeanstalk:command"
    name      = "DeploymentPolicy"
    value     = "Rolling"
  }

  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "SecurityGroups"
    value     = aws_security_group.vprofile_app_sg.id
  }

  setting {
    namespace = "aws:elbv2:loadbalancer"
    name      = "SecurityGroups"
    value     = aws_security_group.vprofile_bean_elb_sg.id
  }

  depends_on = [aws_security_group.vprofile_bean_elb_sg, aws_security_group.vprofile_app_sg]
}


...........................................................................................................................

bastion_host.tf

data "aws_ami" "ubuntu22amiID"{
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}


resource "aws_instance" "vprofile_bastion" {
  ami                     = data.aws_ami.ubuntu22amiID.id
  instance_type           = "t3.micro"
  count                   =  var.instance_count
  subnet_id               =  module.vpc.public_subnets[0]
  key_name                =  aws_key_pair.vprofilekey.key_name
  vpc_security_group_ids  =  [aws_security_group.vprofile_bastion_sg.id]



tags = {

    Name = "vprofile-bastion"
    PROJECT = "vprofile"
}

provisioner "file" {
    content     = templatefile("templates/db-deploy.tmpl", { rds-endpoint = aws_db_instance.vprofile-rds.address, dbuser = var.dbuser, dbpass = var.dbpass })

    destination = "/tmp/vprofile-dbdeploy.sh"
  }

  connection {
    type     = "ssh"
    user     = var.USERNAME
    private_key = file(var.PRIV_KEY_PATH)
    host     = self.public_ip
  }

provisioner "remote-exec" {
    inline = [
      "chmod +x /tmp/vprofile-dbdeploy.sh",
      "sudo tmp/vprofile-dbdeploy.sh"
    ]
}


}

.........................................................................................................................................

db_deploy.tmpl


sudo apt update
sudo apt install git mysql-client -y
git clone -b local https://github.com/hkhcoder/vprofile-project.git
mysql -h ${rds-endpoint} -u ${dbuser} --password=${dbpass} accounts --ssl-mode=DISABLED < /home/ubuntu/vprofile-project/src/main/resources/db_backup.sql

............................................................................................................................................................





